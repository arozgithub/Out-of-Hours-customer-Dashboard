import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Job, Customer, Engineer } from '@/types/job';
import { mockEngineers } from '@/lib/jobUtils';
import { 
  AlertTriangle, 
  User, 
  Phone, 
  Clock,
  MapPin,
  Bell,
  CheckCircle,
  Search,
  Filter,
  Building2,
  Calendar,
  RefreshCw,
  TrendingUp,
  TrendingDown
} from 'lucide-react';

interface GlobalAlertsPortalProps {
  jobs: Job[];
  customers: Customer[];
}

interface Alert {
  id: string;
  jobId: string;
  customerId: string;
  customerName: string;
  engineerName: string;
  type: 'sla_accept' | 'sla_onsite' | 'sla_complete' | 'overdue' | 'critical';
  severity: 'low' | 'medium' | 'high' | 'critical';
  timestamp: Date;
  status: 'active' | 'acknowledged' | 'resolved';
  description: string;
  autoGenerated: boolean;
}

export default function GlobalAlertsPortal({ 
  jobs, 
  customers 
}: GlobalAlertsPortalProps) {
  const [alerts, setAlerts] = useState<Alert[]>([]);
  const [filterStatus, setFilterStatus] = useState<'all' | 'active' | 'acknowledged' | 'resolved'>('all');
  const [filterCustomer, setFilterCustomer] = useState<string>('all');
  const [filterSeverity, setFilterSeverity] = useState<string>('all');
  const [searchTerm, setSearchTerm] = useState('');

  // Generate alerts based on job status and SLA
  useEffect(() => {
    const generateAlerts = () => {
      const newAlerts: Alert[] = [];

      jobs.forEach(job => {
        const now = new Date();
        const jobDate = new Date(job.dateLogged);
        const timeDiff = now.getTime() - jobDate.getTime();
        const minutesDiff = Math.floor(timeDiff / (1000 * 60));

        // SLA Accept Alert (if not accepted within accept SLA)
        if (!job.dateAccepted && minutesDiff > job.customAlerts.acceptSLA) {
          newAlerts.push({
            id: `accept-${job.id}`,
            jobId: job.id,
            customerId: job.customer,
            customerName: job.customer,
            engineerName: job.engineer,
            type: 'sla_accept',
            severity: minutesDiff > (job.customAlerts.acceptSLA * 1.5) ? 'critical' : 'high',
            timestamp: new Date(jobDate.getTime() + job.customAlerts.acceptSLA * 60000),
            status: 'active',
            description: `Job not accepted within ${job.customAlerts.acceptSLA} minutes`,
            autoGenerated: true
          });
        }

        // SLA On Site Alert (if accepted but not on site within onsite SLA)
        if (job.dateAccepted && !job.dateOnSite) {
          const acceptedTime = new Date(job.dateAccepted);
          const onsiteTimeDiff = Math.floor((now.getTime() - acceptedTime.getTime()) / (1000 * 60));
          
          if (onsiteTimeDiff > job.customAlerts.onsiteSLA) {
            newAlerts.push({
              id: `onsite-${job.id}`,
              jobId: job.id,
              customerId: job.customer,
              customerName: job.customer,
              engineerName: job.engineer,
              type: 'sla_onsite',
              severity: onsiteTimeDiff > (job.customAlerts.onsiteSLA * 1.5) ? 'critical' : 'high',
              timestamp: new Date(acceptedTime.getTime() + job.customAlerts.onsiteSLA * 60000),
              status: 'active',
              description: `Engineer not on site within ${job.customAlerts.onsiteSLA} minutes`,
              autoGenerated: true
            });
          }
        }

        // SLA Complete Alert (if on site but not completed within complete SLA)
        if (job.dateOnSite && !job.dateCompleted) {
          const onsiteTime = new Date(job.dateOnSite);
          const completeTimeDiff = Math.floor((now.getTime() - onsiteTime.getTime()) / (1000 * 60));
          
          if (completeTimeDiff > job.customAlerts.completedSLA) {
            newAlerts.push({
              id: `complete-${job.id}`,
              jobId: job.id,
              customerId: job.customer,
              customerName: job.customer,
              engineerName: job.engineer,
              type: 'sla_complete',
              severity: completeTimeDiff > (job.customAlerts.completedSLA * 1.5) ? 'critical' : 'high',
              timestamp: new Date(onsiteTime.getTime() + job.customAlerts.completedSLA * 60000),
              status: 'active',
              description: `Job not completed within ${job.customAlerts.completedSLA} minutes`,
              autoGenerated: true
            });
          }
        }

        // Critical Priority Alert
        if (job.priority === 'Critical') {
          newAlerts.push({
            id: `critical-${job.id}`,
            jobId: job.id,
            customerId: job.customer,
            customerName: job.customer,
            engineerName: job.engineer,
            type: 'critical',
            severity: 'critical',
            timestamp: new Date(job.dateLogged),
            status: job.status === 'completed' ? 'resolved' : 'active',
            description: `Critical priority job requires immediate attention`,
            autoGenerated: true
          });
        }

        // Overdue Alert (red status)
        if (job.status === 'red') {
          newAlerts.push({
            id: `overdue-${job.id}`,
            jobId: job.id,
            customerId: job.customer,
            customerName: job.customer,
            engineerName: job.engineer,
            type: 'overdue',
            severity: 'high',
            timestamp: jobDate,
            status: 'active',
            description: `Job is overdue and requires immediate attention`,
            autoGenerated: true
          });
        }
      });

      setAlerts(newAlerts);
    };

    generateAlerts();
  }, [jobs]);

  // Filter alerts
  const filteredAlerts = alerts.filter(alert => {
    if (filterStatus !== 'all' && alert.status !== filterStatus) return false;
    if (filterCustomer !== 'all' && alert.customerId !== filterCustomer) return false;
    if (filterSeverity !== 'all' && alert.severity !== filterSeverity) return false;
    if (searchTerm && !alert.description.toLowerCase().includes(searchTerm.toLowerCase()) && 
        !alert.customerName.toLowerCase().includes(searchTerm.toLowerCase()) &&
        !alert.engineerName.toLowerCase().includes(searchTerm.toLowerCase())) return false;
    return true;
  });

  // Group alerts by customer
  const alertsByCustomer = filteredAlerts.reduce((acc, alert) => {
    if (!acc[alert.customerName]) {
      acc[alert.customerName] = [];
    }
    acc[alert.customerName].push(alert);
    return acc;
  }, {} as Record<string, Alert[]>);

  // Alert statistics
  const stats = {
    total: alerts.length,
    active: alerts.filter(a => a.status === 'active').length,
    critical: alerts.filter(a => a.severity === 'critical').length,
    high: alerts.filter(a => a.severity === 'high').length,
    byCustomer: Object.keys(alertsByCustomer).length
  };

  const handleAcknowledgeAlert = (alertId: string) => {
    setAlerts(prev => prev.map(alert => 
      alert.id === alertId 
        ? { ...alert, status: 'acknowledged' }
        : alert
    ));
  };

  const handleResolveAlert = (alertId: string) => {
    setAlerts(prev => prev.map(alert => 
      alert.id === alertId 
        ? { ...alert, status: 'resolved' }
        : alert
    ));
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-600 text-white';
      case 'high': return 'bg-orange-500 text-white';
      case 'medium': return 'bg-yellow-500 text-white';
      case 'low': return 'bg-blue-500 text-white';
      default: return 'bg-gray-500 text-white';
    }
  };

  const getAlertTypeIcon = (type: string) => {
    switch (type) {
      case 'sla_accept': return <Clock className="h-4 w-4" />;
      case 'sla_onsite': return <MapPin className="h-4 w-4" />;
      case 'sla_complete': return <CheckCircle className="h-4 w-4" />;
      case 'critical': return <AlertTriangle className="h-4 w-4" />;
      case 'overdue': return <TrendingDown className="h-4 w-4" />;
      default: return <Bell className="h-4 w-4" />;
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900 flex items-center space-x-2">
            <Bell className="h-8 w-8 text-red-600" />
            <span>Global Alerts Portal</span>
          </h1>
          <p className="text-muted-foreground">Monitor all customer alerts and SLA violations</p>
        </div>
        <Button variant="outline" className="flex items-center space-x-2">
          <RefreshCw className="h-4 w-4" />
          <span>Refresh Alerts</span>
        </Button>
      </div>

      {/* Statistics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <Bell className="h-5 w-5 text-blue-600" />
              <div>
                <p className="text-2xl font-bold">{stats.total}</p>
                <p className="text-sm text-muted-foreground">Total Alerts</p>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <AlertTriangle className="h-5 w-5 text-red-600" />
              <div>
                <p className="text-2xl font-bold text-red-600">{stats.active}</p>
                <p className="text-sm text-muted-foreground">Active Alerts</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <TrendingUp className="h-5 w-5 text-red-800" />
              <div>
                <p className="text-2xl font-bold text-red-800">{stats.critical}</p>
                <p className="text-sm text-muted-foreground">Critical</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <TrendingDown className="h-5 w-5 text-orange-600" />
              <div>
                <p className="text-2xl font-bold text-orange-600">{stats.high}</p>
                <p className="text-sm text-muted-foreground">High Priority</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <Building2 className="h-5 w-5 text-green-600" />
              <div>
                <p className="text-2xl font-bold">{stats.byCustomer}</p>
                <p className="text-sm text-muted-foreground">Customers</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Filters */}
      <Card>
        <CardContent className="p-4">
          <div className="flex flex-wrap gap-4 items-center">
            <div className="flex items-center space-x-2">
              <Search className="h-4 w-4" />
              <Input
                placeholder="Search alerts..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-64"
              />
            </div>

            <Select value={filterStatus} onValueChange={(value) => setFilterStatus(value as 'all' | 'active' | 'acknowledged' | 'resolved')}>
              <SelectTrigger className="w-40">
                <SelectValue placeholder="Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="active">Active</SelectItem>
                <SelectItem value="acknowledged">Acknowledged</SelectItem>
                <SelectItem value="resolved">Resolved</SelectItem>
              </SelectContent>
            </Select>

            <Select value={filterCustomer} onValueChange={(value) => setFilterCustomer(value)}>
              <SelectTrigger className="w-48">
                <SelectValue placeholder="Customer" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Customers</SelectItem>
                {customers.map(customer => (
                  <SelectItem key={customer.id} value={customer.name}>
                    {customer.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>

            <Select value={filterSeverity} onValueChange={(value) => setFilterSeverity(value)}>
              <SelectTrigger className="w-40">
                <SelectValue placeholder="Severity" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Severity</SelectItem>
                <SelectItem value="critical">Critical</SelectItem>
                <SelectItem value="high">High</SelectItem>
                <SelectItem value="medium">Medium</SelectItem>
                <SelectItem value="low">Low</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </CardContent>
      </Card>

      {/* Alerts Tabs */}
      <Tabs defaultValue="all" className="w-full">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="all">All Alerts ({filteredAlerts.length})</TabsTrigger>
          <TabsTrigger value="customer">By Customer</TabsTrigger>
          <TabsTrigger value="critical">Critical Only</TabsTrigger>
          <TabsTrigger value="timeline">Timeline</TabsTrigger>
        </TabsList>

        {/* All Alerts Tab */}
        <TabsContent value="all" className="space-y-4">
          {filteredAlerts.length === 0 ? (
            <Card>
              <CardContent className="p-8 text-center">
                <CheckCircle className="mx-auto h-12 w-12 text-green-500 mb-4" />
                <h3 className="text-lg font-medium text-gray-900 mb-2">No alerts found</h3>
                <p className="text-muted-foreground">All systems are running smoothly</p>
              </CardContent>
            </Card>
          ) : (
            <div className="space-y-3">
              {filteredAlerts.map(alert => {
                const job = jobs.find(j => j.id === alert.jobId);
                return (
                  <Card key={alert.id} className={`border-l-4 ${
                    alert.severity === 'critical' ? 'border-l-red-600' :
                    alert.severity === 'high' ? 'border-l-orange-500' :
                    alert.severity === 'medium' ? 'border-l-yellow-500' :
                    'border-l-blue-500'
                  }`}>
                    <CardContent className="p-4">
                      <div className="flex items-start justify-between">
                        <div className="flex items-start space-x-3">
                          <div className="flex-shrink-0">
                            {getAlertTypeIcon(alert.type)}
                          </div>
                          <div className="flex-1">
                            <div className="flex items-center space-x-2 mb-1">
                              <h4 className="font-medium text-gray-900">{alert.description}</h4>
                              <Badge className={getSeverityColor(alert.severity)}>
                                {alert.severity.toUpperCase()}
                              </Badge>
                              <Badge variant="outline">
                                {alert.status}
                              </Badge>
                            </div>
                            <div className="space-y-1">
                              <p className="text-sm text-muted-foreground">
                                <Building2 className="inline h-3 w-3 mr-1" />
                                {alert.customerName} • Job: {job?.jobNumber} • Engineer: {alert.engineerName}
                              </p>
                              <p className="text-sm text-muted-foreground">
                                <Calendar className="inline h-3 w-3 mr-1" />
                                {alert.timestamp.toLocaleString()}
                              </p>
                              {job && (
                                <p className="text-sm text-muted-foreground">
                                  {job.description}
                                </p>
                              )}
                            </div>
                          </div>
                        </div>
                        
                        <div className="flex items-center space-x-2">
                          {alert.status === 'active' && (
                            <>
                              <Button 
                                size="sm" 
                                variant="outline"
                                onClick={() => handleAcknowledgeAlert(alert.id)}
                              >
                                Acknowledge
                              </Button>
                              <Button 
                                size="sm"
                                onClick={() => handleResolveAlert(alert.id)}
                                className="bg-green-600 hover:bg-green-700"
                              >
                                <CheckCircle className="h-4 w-4 mr-1" />
                                Resolve
                              </Button>
                            </>
                          )}
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                );
              })}
            </div>
          )}
        </TabsContent>

        {/* By Customer Tab */}
        <TabsContent value="customer" className="space-y-4">
          {Object.entries(alertsByCustomer).map(([customerName, customerAlerts]) => (
            <Card key={customerName}>
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span className="flex items-center space-x-2">
                    <Building2 className="h-5 w-5" />
                    <span>{customerName}</span>
                  </span>
                  <Badge variant="destructive">
                    {customerAlerts.filter(a => a.status === 'active').length} Active
                  </Badge>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {customerAlerts.map(alert => {
                    const job = jobs.find(j => j.id === alert.jobId);
                    return (
                      <div key={alert.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                        <div className="flex items-center space-x-3">
                          {getAlertTypeIcon(alert.type)}
                          <div>
                            <p className="font-medium text-sm">{alert.description}</p>
                            <p className="text-xs text-muted-foreground">
                              Job: {job?.jobNumber} • Engineer: {alert.engineerName}
                            </p>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Badge className={getSeverityColor(alert.severity)}>
                            {alert.severity}
                          </Badge>
                          {alert.status === 'active' && (
                            <Button 
                              size="sm"
                              onClick={() => handleResolveAlert(alert.id)}
                              className="bg-green-600 hover:bg-green-700"
                            >
                              Resolve
                            </Button>
                          )}
                        </div>
                      </div>
                    );
                  })}
                </div>
              </CardContent>
            </Card>
          ))}
        </TabsContent>

        {/* Critical Only Tab */}
        <TabsContent value="critical" className="space-y-4">
          {filteredAlerts.filter(a => a.severity === 'critical').map(alert => {
            const job = jobs.find(j => j.id === alert.jobId);
            return (
              <Card key={alert.id} className="border-l-4 border-l-red-600 bg-red-50">
                <CardContent className="p-4">
                  <div className="flex items-start justify-between">
                    <div className="flex items-start space-x-3">
                      <AlertTriangle className="h-5 w-5 text-red-600 flex-shrink-0" />
                      <div>
                        <h4 className="font-medium text-red-900 mb-1">{alert.description}</h4>
                        <p className="text-sm text-red-700">
                          {alert.customerName} • Job: {job?.jobNumber} • Engineer: {alert.engineerName}
                        </p>
                        <p className="text-sm text-red-600">
                          {alert.timestamp.toLocaleString()}
                        </p>
                      </div>
                    </div>
                    <Button 
                      size="sm"
                      onClick={() => handleResolveAlert(alert.id)}
                      className="bg-red-600 hover:bg-red-700"
                    >
                      <CheckCircle className="h-4 w-4 mr-1" />
                      Resolve Now
                    </Button>
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </TabsContent>

        {/* Timeline Tab */}
        <TabsContent value="timeline" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Alert Timeline</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {filteredAlerts
                  .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())
                  .map(alert => {
                    const job = jobs.find(j => j.id === alert.jobId);
                    return (
                      <div key={alert.id} className="flex items-start space-x-4 border-l-2 border-gray-200 pl-4">
                        <div className={`h-3 w-3 rounded-full mt-1 ${
                          alert.severity === 'critical' ? 'bg-red-600' :
                          alert.severity === 'high' ? 'bg-orange-500' :
                          alert.severity === 'medium' ? 'bg-yellow-500' :
                          'bg-blue-500'
                        }`} />
                        <div className="flex-1">
                          <div className="flex items-center justify-between">
                            <h4 className="font-medium">{alert.description}</h4>
                            <span className="text-sm text-muted-foreground">
                              {alert.timestamp.toLocaleString()}
                            </span>
                          </div>
                          <p className="text-sm text-muted-foreground">
                            {alert.customerName} • Job: {job?.jobNumber} • Engineer: {alert.engineerName}
                          </p>
                        </div>
                      </div>
                    );
                  })}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
